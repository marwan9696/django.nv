name: Django CI

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_KEY: Django

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install deps & sanity check
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python manage.py check

  test:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Run unit tests with coverage (XML) — tolerate no tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov
          set -o pipefail
          pytest --cov=. --cov-report=xml || code=$?
          if [ "${code:-0}" -eq 5 ]; then
            echo "✅ No tests collected (pytest exit 5). Continuing."
            [ -f coverage.xml ] || echo '<?xml version="1.0"?><coverage></coverage>' > coverage.xml
            exit 0
          else
            exit "${code:-0}"
          fi

      - name: Upload coverage.xml (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: warn

  sonarqube:
    runs-on: ubuntu-22.04
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install diagnostics tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq dnsutils iputils-ping traceroute netcat-openbsd openssl ca-certificates

      - name: Show runner & network basics
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          set -e
          echo "Date: $(date -u)"
          echo "Kernel: $(uname -a)"
          echo "OpenSSL: $(openssl version)"
          echo "cURL: $(curl --version | head -n1)"
          echo "Resolved SONAR_HOST_URL: ${SONAR_HOST_URL}"
          HOSTNAME="$(echo "${SONAR_HOST_URL}" | sed -E 's#https?://([^/]+)/?.*#\1#')"
          echo "Host: ${HOSTNAME}"
          echo "DNS A/AAAA for host:"
          host "${HOSTNAME}" || true
          echo "Traceroute (first 15 hops):"
          traceroute -m 15 "${HOSTNAME}" || true

      - name: Preflight API checks
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -x
          BASE="${SONAR_HOST_URL%/}"
          curl -sv --max-time 20 "${BASE}/api/system/status" -o preflight_status_noauth.json || true
          curl -sv --max-time 20 -u "${SONAR_TOKEN}:" "${BASE}/api/system/status" -o preflight_status_auth.json || true
          curl -sv --max-time 20 -u "${SONAR_TOKEN}:" "${BASE}/api/authentication/validate" -o preflight_validate.json || true
          curl -sv --max-time 20 -u "${SONAR_TOKEN}:" "${BASE}/api/projects/search?projects=${PROJECT_KEY}" -o preflight_project.json || true

      - name: TLS probe (openssl s_client)
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          HOSTNAME="$(echo "${SONAR_HOST_URL}" | sed -E 's#https?://([^/]+)/?.*#\1#')"
          echo | openssl s_client -connect "${HOSTNAME}:443" -servername "${HOSTNAME}" 2>/dev/null | awk 'NR<=40 {print}' || true

      - name: Optional ping
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          HOSTNAME="$(echo "${SONAR_HOST_URL}" | sed -E 's#https?://([^/]+)/?.*#\1#')"
          ping -c 2 "${HOSTNAME}" || true

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml
          path: .

      - name: SonarQube Scan (verbose + long timeouts)
        id: scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}   # e.g., https://sonarqube-rps908qj.lab.practical-devsecops.training
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: |
            -Dsonar.projectKey=${{ env.PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.python.version=3.8
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.log.level=DEBUG
            -Dsonar.verbose=true
            -Dsonar.scanner.http.connectTimeout=60000
            -Dsonar.scanner.http.socketTimeout=600000

      - name: Collect scanner artifacts
        if: always()
        run: |
          mkdir -p sonar_artifacts
          find . -type f -name "report-task.txt" -maxdepth 3 -print -exec cp {} sonar_artifacts/ \; || true
          if [ -d ".scannerwork" ]; then
            tar -czf sonar_artifacts/scannerwork.tgz .scannerwork || true
          fi
          cp -f preflight_*.json sonar_artifacts/ 2>/dev/null || true

      - name: Upload diagnostics (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-diagnostics
          path: sonar_artifacts

  integration:
    runs-on: ubuntu-22.04
    needs: sonarqube
    steps:
      - run: echo "This is an integration step"
      - run: exit 1
        continue-on-error: true

  prod:
    runs-on: ubuntu-22.04
    needs: integration
    steps:
      - run: echo "This is a deploy step."
